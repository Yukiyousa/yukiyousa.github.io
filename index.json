[{"categories":["Notes"],"content":"之前用 typecho 搭的博客需要使用服务器，续不起阿里云服务器了（留下了贫穷的泪水，于是发现了好用的 Hugo ~ 1.Hugo初探 Hugo 是由 Go 语言实现的静态网站生成器。简单、易用、高效、易扩展、快速部署！ ","date":"2021-10-17","objectID":"/hugo-githubpages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/:0:0","tags":["笔记"],"title":"Hugo+GithubPages搭建博客教程","uri":"/hugo-githubpages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/"},{"categories":["Notes"],"content":"1.1安装Hugo 首先我们需要下载 Hugo 和 git，前往Hugo中文文档，推荐使用二进制安装，点击Hugo Releases进入github页面，选择对应版本下载 下载完成后解压到本地合适的文件夹，假设我们解压到 D:\\myblog\\bin，将此路径添加到系统环境变量中，打开终端输入 hugo version 检查hugo版本，查询成功则表示安装成功 hugo version ","date":"2021-10-17","objectID":"/hugo-githubpages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/:1:0","tags":["笔记"],"title":"Hugo+GithubPages搭建博客教程","uri":"/hugo-githubpages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/"},{"categories":["Notes"],"content":"1.2生成站点 选择合适的文件夹建站，使用 Hugo 快速生成站点，进入博客根目录输入（.代表当前目录） hugo new site demosite # 命令格式，hugo new site \u003c项目名称\u003e # or hugo new site . 进入根目录，站点目录结构如下： ├── archetypes │ └── default.md ├── content ├── layouts ├── data ├── resources ├── static ├── themes # 主题文件夹 └── config.coml # 配置文件 ","date":"2021-10-17","objectID":"/hugo-githubpages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/:2:0","tags":["笔记"],"title":"Hugo+GithubPages搭建博客教程","uri":"/hugo-githubpages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/"},{"categories":["Notes"],"content":"1.3主题选择 前往Hugo主题选择心仪的主题，找到对应 Github 仓库，下载zip或直接使用 git clone cd themes git clone https://github.com/xxx.git 若主题文件夹含有 -master 后缀，尽量将其删除，以免后期引起奇奇怪怪的BUG，主题的不同也可能需要在初期配置不同的文件，本文主要面向Lovelt主题 重要！！！将主题的 config.coml 文件替换根目录下的同名文件，此文件是整个站点主题的配置文件，可根据自己的需求调整 ","date":"2021-10-17","objectID":"/hugo-githubpages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/:3:0","tags":["笔记"],"title":"Hugo+GithubPages搭建博客教程","uri":"/hugo-githubpages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/"},{"categories":["Notes"],"content":"1.4创建文章 让我们创建第一篇文章！ hugo new posts/demo.md ","date":"2021-10-17","objectID":"/hugo-githubpages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/:4:0","tags":["笔记"],"title":"Hugo+GithubPages搭建博客教程","uri":"/hugo-githubpages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/"},{"categories":["Notes"],"content":"1.5启动服务 启动 hugo 服务器，进入 http://localhost:1313 预览页面 hugo server 2.Lovelt主题配置记录 本部分Lovelt主题踩坑配置记录 ","date":"2021-10-17","objectID":"/hugo-githubpages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/:5:0","tags":["笔记"],"title":"Hugo+GithubPages搭建博客教程","uri":"/hugo-githubpages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/"},{"categories":["Notes"],"content":"2.1初始配置 在最开始配置前需要修改一下主题路径 themesDir 配置，将其注释掉 baseURL = \"https://yourname.github.io\" # [en, zh-cn, fr, pl, ...] determines default content language # [en, zh-cn, fr, pl, ...] 设置默认的语言 defaultContentLanguage = \"zh-cn\" # theme # 主题 theme = \"LoveIt\" # themes directory # 主题目录 themesDir = \"../..\" # 将其注释 # website title # 网站标题 title = \"\" ","date":"2021-10-17","objectID":"/hugo-githubpages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/:6:0","tags":["笔记"],"title":"Hugo+GithubPages搭建博客教程","uri":"/hugo-githubpages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/"},{"categories":["Notes"],"content":"2.2时间设置 最开始我创建博客在设置时间时，时间变成了 0001-01-01 。Hugo 在生成静态页面的时候，不会生成超过当前时间的文章；而 Hugo 默认采用的是 格林尼治平时 (GMT)，比北京时间 (UTC+8) 晚了 8 个小时。也就是说，当北京时间在 08:00 之前，而你又将文章发布日期设在当天时，Hugo 就默认不会生成这个页面，可以在文章开头使用 timezone 指定时区： --- ... date: 2019-05-12 timezone: UTC+8 ... --- 其他配置可参考 config.toml 进行个性化配置 3.GithubPages和个人域名 ","date":"2021-10-17","objectID":"/hugo-githubpages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/:7:0","tags":["笔记"],"title":"Hugo+GithubPages搭建博客教程","uri":"/hugo-githubpages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/"},{"categories":["Notes"],"content":"3.1GithubPages建站 GitHubPages 是一项静态站点托管服务，它直接从 GitHub 上的仓库获取 index.html、HTML、CSS 和 JavaScript 文件，也可以通过构建过程运行文件，然后发布网站。我们使用 GitHubPages 搭建个人网站 （1）创建一个新的 Github 项目，项目名称需要是 \u003cusername.github.io\u003e格式，最好先不要选择创建 README.md 文件 （2）生成静态页面之前需要修改 config.toml 文件中的 baseURL 配置，将其修改为个人站点，即https://yourname.github.io # config.toml baseURL = \"https://yourname.github.io\" title = \"\" theme = \"\" （3）若要将博客托管在 Github 上，需要上传静态页面，在根目录下输入 hugo 可以生成静态页面 hugo 输入后我们发下根目录下多了一个 public 目录，所有静态页面都会生成到 public 目录 （4）上传项目，静态页面生成完成后，便可以将整个静态页面以及本项目其他文件推送到 Github 项目中 cd public git init git remote add origin https://github.com/yourname/xxx.github.io.git git add . git commit -m \"first commit\" git push -u origin master （5）浏览器访问 http://yourname.github.io/，你的博客已经超成功部署 ","date":"2021-10-17","objectID":"/hugo-githubpages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/:8:0","tags":["笔记"],"title":"Hugo+GithubPages搭建博客教程","uri":"/hugo-githubpages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/"},{"categories":["Notes"],"content":"3.2配置个人域名 在配置个人域名之前，我们需要一些前置知识（以阿里云为例） 域名，简单来说就是访问博客的链接，我们需要购买自己的域名。可以通过阿里云选择域名 在阿里云购买域名过程中需要实名认证，实名认证后需要进行备案，可以通过阿里云APP方便操作。 DNS解析，简单来说就是解析域名和IP的对应关系。具体可参考阿里云域名购买与DNS解析教程。在cmd中输入 ping +域名 ，丢包率为0则解析成功~ （1）当你拥有域名后，首先是用 ping 命令找到存放你的 GitHubPages 的主机的IP地址，在终端里面用命令 ping yourname.github.io 便可完成，回复地址即我们要找的IP地址 （2）在购买域名的提供商为域名添加解析，添加两条记录 记录类型：CNAME 将一个域名指向另一个域名，需要添加 CNAME 记录（yourname.github.io）。 主机记录：www 表示访问域名的时候以 www 开头为一级域名。如果是二级域名的话就在前面加上自己想要的参数，访问的时候也是以二级域名的形式访问 记录类型：A 将域名指向一个IPv4地址，如果需要将域名指向一个 IP 地址（刚才我们 ping 获得的IP地址），就需要添加 A 记录。 主机记录：@ 表示访问的时候直接访问，前面不加任何参数 （3）在 Github 仓库根目录中创建 CNAME 文件，内容是你的域名（不要加http头），同步远程库同步到本地库。 git pull --rebase origin master （4）打开仓库 Repository Settings 的 Pages ，我们发现 Custom domain 变为我们的域名，若没有自行更改即可，选择 Enforce HTTPS 为你的网站添加小绿锁，配置后需要等一会才可以生效~ （5） 设置完成后就可以通过你的域名访问部署在GitHub上的Hugo的网站啦 ","date":"2021-10-17","objectID":"/hugo-githubpages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/:9:0","tags":["笔记"],"title":"Hugo+GithubPages搭建博客教程","uri":"/hugo-githubpages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/"},{"categories":["Notes"],"content":"1.Tensor的创建 ","date":"2021-09-30","objectID":"/pytorch-note1/:0:0","tags":["深度学习","笔记"],"title":"Pytorch学习笔记（一）张量的定义与操作","uri":"/pytorch-note1/"},{"categories":["Notes"],"content":"1.1Tensor的简介 （1）张量是一个多维数组，是标量、向量、矩阵的高维扩展，在Pytorch中，torch.Tensor是存储和变换数据的主要工具，它提供了GPU计算的自动求梯度等更多功能 （2）Tensor与Variable：在0.4.0版本后均并入Tensor，Variable有下面五种属性 data: 被包装的Tensor grad: data的梯度 grad_fn: fn表示function的意思，记录我么创建的创建张量时用到的方法 requires_grad: 指示是否需要梯度， 有的不需要梯度 is_leaf: 指示是否是叶子节点（张量） （3）Tensor属性 dtype：张量的数据类型，最常用float32和int64 shape：张量的形状 device：张量所在的设备，CPU或GPU ","date":"2021-09-30","objectID":"/pytorch-note1/:1:0","tags":["深度学习","笔记"],"title":"Pytorch学习笔记（一）张量的定义与操作","uri":"/pytorch-note1/"},{"categories":["Notes"],"content":"1.2Tensor的创建 （1）直接创建张量torch.Tensor() t = torch.Tensor(data,devicr='cuda') （2）通过numpy数组生成torch.from_numpy() arr = np.array([[1,2,3],[4,5,6]]) t = torch.from_numpy(arr) （3）依据数值创建 torch.zeros() # 创建全零张量 torch.ones() torch.full() # t = torch.full((3,3), 10) torch.arange(start, end, steps) # 创建等差的1维张量,数值区间[start, end)，step表示步长 torch.linspace(start, end, steps) # 创建均分的1维张量,数值区间[start, end]，steps指的是列表的长度 torch.eye() # 创建对角矩阵，默认方阵 （4）依据概率创建张量torch.noraml(mean, std, size, out=None) torch.normal() # mean是均值，std是标准差 torch.randn() # 生成标准正态分布 torch.rand() # 生成均匀分布 torch.randperm(n) # 生成从0 - n-1的随机排列, n是张量的长度 2.Tensor的操作 ","date":"2021-09-30","objectID":"/pytorch-note1/:2:0","tags":["深度学习","笔记"],"title":"Pytorch学习笔记（一）张量的定义与操作","uri":"/pytorch-note1/"},{"categories":["Notes"],"content":"2.1基本操作 （1）拼接 torch,cat(tensors, dim, out=None) # 将张量按维度dim进行拼接 torch.stack(tensors, dim, out=None) # 在新创建的维度dim上进行拼接 （2）切分 torch.chunk(input, chunks, dim=0) # 将张量按维度dim进行平均切分，返回值是张量列表 torch.split(tensor, split_size_or_sections, dim=0) # 可以指定切分的长度， split_size_or_sections为int时表示每一份的长度 ","date":"2021-09-30","objectID":"/pytorch-note1/:3:0","tags":["深度学习","笔记"],"title":"Pytorch学习笔记（一）张量的定义与操作","uri":"/pytorch-note1/"},{"categories":["Notes"],"content":"2.2数学操作 TODO ","date":"2021-09-30","objectID":"/pytorch-note1/:4:0","tags":["深度学习","笔记"],"title":"Pytorch学习笔记（一）张量的定义与操作","uri":"/pytorch-note1/"},{"categories":["Web"],"content":"Vue简介 Vue 是一套用于构建用户界面的渐进式框架。Vue对于初学者来说容易上手，官方教程文档也很全面且清楚，是快速建立项目不错的选择。 在学习完Vue的基础后，可以通过使用Vue CLI快速搭建一个属于自己的项目！ CL4配置 Vue 提供了一个CLI，Vue CLI 是一个基于 Vue.js 进行快速开发的完整系统，为单页面应用 (SPA) 快速搭建繁杂的脚手架，CLI4的配置流程大致总结了流程如下： ","date":"2021-04-30","objectID":"/vuecli4/:0:0","tags":["Web"],"title":"Vue CLI4配置","uri":"/vuecli4/"},{"categories":["Web"],"content":"安装node.js 进入node.js官网根据系统安装node.js。安装完node.js之后，npm也会自动安装。查询是否安装成功的命令： node -v npm -v ","date":"2021-04-30","objectID":"/vuecli4/:1:0","tags":["Web"],"title":"Vue CLI4配置","uri":"/vuecli4/"},{"categories":["Web"],"content":"npm换源 使用npm安装一般比较慢，可以安装cnpm淘宝镜像来替换npm cnpm -v ","date":"2021-04-30","objectID":"/vuecli4/:2:0","tags":["Web"],"title":"Vue CLI4配置","uri":"/vuecli4/"},{"categories":["Web"],"content":"安装Vue CLI4 进入终端，全局安装脚手架工具vue-cli，命令如下： npm install --global @vue-cli # OR yarn global add @vue/cli 若你已经安装过久版本，输入如下命令卸载Vue CLI： npm uninstall vue-cli -g 查询是否安装成功及查询版本的命令： Vue -V # OR vue --version ","date":"2021-04-30","objectID":"/vuecli4/:3:0","tags":["Web"],"title":"Vue CLI4配置","uri":"/vuecli4/"},{"categories":["Web"],"content":"开始创建一个项目 在终端输入vue create加项目名称创建一个新的项目： vue create project-name 选择预置，选择Manually select features自定义配置： 至少选择Babel Router Vuex Linter，其他根据需求自主选择： 选择语法检查器，可以默认，也可以选ESlint(语法检查非常严格) 选择In package.json ，使用package.json 项目结构比较简单： 进入项目根目录终端，运行项目：npm run serve，我们发现项目已经运行在本机服务器8080端口 ","date":"2021-04-30","objectID":"/vuecli4/:4:0","tags":["Web"],"title":"Vue CLI4配置","uri":"/vuecli4/"},{"categories":["Web"],"content":"安装axios 在项目中可以选择使用原生ajax发起请求，也可以使用axios，终端进入项目，安装axios： npm --save install axios # OR npm install --save axios vue-axios 将下面代码加入入口main.js文件即可使用： import Vue from 'vue' import axios from 'axios' import VueAxios from 'vue-axios' Vue.use(VueAxios, axios) 项目目总览 ├── src │ ├── App.vue │ ├── assets │ │ └── logo.png │ ├── components # 组件 │ │ └──Helloworld.vue │ ├── views │ │ ├── About.vue │ │ └── Home.vue │ ├── main.js │ ├── router # 路由配置文件 │ │ └── router.js │ └── store │ └── store.js ├── README.md ├── babel.config.js ├── package-lock.json ├── package.json └── babel.config.js 目录简介 ","date":"2021-04-30","objectID":"/vuecli4/:5:0","tags":["Web"],"title":"Vue CLI4配置","uri":"/vuecli4/"},{"categories":["Web"],"content":"public public用于存放静态文件如index.html和favicon.ico public/index.html是项目生成的入口文件，webpack打包的js,css也会自动注入到该页面中。 ","date":"2021-04-30","objectID":"/vuecli4/:6:0","tags":["Web"],"title":"Vue CLI4配置","uri":"/vuecli4/"},{"categories":["Web"],"content":"src src是存放各种vue文件和静态资源的地方 src/assets用于存放各种静态文件，如图片 src/compnents：用于存放公共组件 src/views：用于存放写好的各种页面，如login等 src/App.vue：项目主体vue模块，可以引入其他模块。它是项目的主组件，所有页面都是在app.vue下渲染的 src/main.js：项目的入口文件，主要作用是初始化vue实例，同时可以在此文件中引用某些组件库或者全局挂在一些变量 src/router.js：路由文件，简单来说就是各个页面的地址路径，同时可以直接在里边编写路由守卫 src/store.js：主要用于保存项目的状态 ","date":"2021-04-30","objectID":"/vuecli4/:7:0","tags":["Web"],"title":"Vue CLI4配置","uri":"/vuecli4/"},{"categories":["Web"],"content":"package.json package.json文件包括：项目的基本信息、项目开发所需要模块、版本、项目名称等 ","date":"2021-04-30","objectID":"/vuecli4/:8:0","tags":["Web"],"title":"Vue CLI4配置","uri":"/vuecli4/"},{"categories":null,"content":"About me Yizhuo Ma（马一卓） I am currently a junior majoring in software engineering at University of Electronic Science and Technology of China, member of ZeQi Studio. ","date":"2019-08-02","objectID":"/about/:1:0","tags":null,"title":"About me","uri":"/about/"},{"categories":null,"content":"Education Experience 2019~present, University of Electronic Science and Technology of China, B.E. in Software Engineering ","date":"2019-08-02","objectID":"/about/:2:0","tags":null,"title":"About me","uri":"/about/"},{"categories":null,"content":"Awards and Scholarship National Encouragement scholarship 2020 The First Prize Scholarship 2020 Excellent Student Scholarship 2020,2021 National Second Prize of National College Student Information Security Contest(CISCN) 2021 ","date":"2019-08-02","objectID":"/about/:3:0","tags":null,"title":"About me","uri":"/about/"},{"categories":null,"content":"Contact Email:yukiyousa@163.com ","date":"2019-08-02","objectID":"/about/:4:0","tags":null,"title":"About me","uri":"/about/"},{"categories":null,"content":"🔗ZeQi Studio: 择栖工作室 🔗Jotang Studio: 焦糖工作室 🔗Vera Xinyue Shen: 数据安全工程师\u0026科幻小说家的优秀学姐 🔗sharifxu: 老徐 🔗su29029: web全栈\u0026安全开发者苏佬 🔗Zhenyu He: 何神 🔗Alexanderliu: 兔子姐姐 🔗rufus: 六只羊 🔗Yiling He: 信安大赛前辈\u0026ZJU直博 ","date":"2019-08-02","objectID":"/link/:0:0","tags":null,"title":"友链","uri":"/link/"}]